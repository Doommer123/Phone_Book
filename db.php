<?php
/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –ì–æ—Ä–æ–¥—Å–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
 * Enhanced Version with Error Handling and Security
 */

class Database {
    private $host = "localhost";
    private $user = "root";
    private $password = "";
    private $dbname = "phone_directory";
    private $conn;
    private static $instance = null;

    public function __construct() {
        $this->connect();
    }

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    private function connect() {
        try {
            $this->conn = new mysqli($this->host, $this->user, $this->password, $this->dbname);
            
            if ($this->conn->connect_error) {
                throw new Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $this->conn->connect_error);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
            $this->conn->set_charset("utf8mb4");
            
            // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
            $this->log("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " . $this->dbname);
            
        } catch (Exception $e) {
            $this->handleError($e->getMessage());
        }
    }

    public function getConnection() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!$this->conn || !$this->conn->ping()) {
            $this->connect();
        }
        return $this->conn;
    }

    public function query($sql, $params = []) {
        try {
            $stmt = $this->getConnection()->prepare($sql);
            
            if (!$stmt) {
                throw new Exception("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: " . $this->conn->error);
            }

            if (!empty($params)) {
                $types = '';
                $bind_params = [];
                
                foreach ($params as $param) {
                    if (is_int($param)) {
                        $types .= 'i';
                    } elseif (is_float($param)) {
                        $types .= 'd';
                    } elseif (is_string($param)) {
                        $types .= 's';
                    } else {
                        $types .= 'b';
                    }
                    $bind_params[] = $param;
                }
                
                array_unshift($bind_params, $types);
                call_user_func_array([$stmt, 'bind_param'], $this->refValues($bind_params));
            }

            if (!$stmt->execute()) {
                throw new Exception("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: " . $stmt->error);
            }

            $result = $stmt->get_result();
            $this->log("–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: " . substr($sql, 0, 100) . "...");
            
            return $result;

        } catch (Exception $e) {
            $this->handleError($e->getMessage());
            return false;
        }
    }

    public function getLastInsertId() {
        return $this->getConnection()->insert_id;
    }

    private function refValues($arr) {
        $refs = [];
        foreach ($arr as $key => $value) {
            $refs[$key] = &$arr[$key];
        }
        return $refs;
    }

    private function handleError($message) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—à–∏–±–∫–∏
        if ($this->isDevelopment()) {
            $error_html = "
            <div style='
                background: #ffebee;
                border: 2px solid #f44336;
                border-radius: 10px;
                padding: 20px;
                margin: 20px;
                font-family: Arial, sans-serif;
                color: #c62828;
                box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            '>
                <h3 style='color: #d32f2f; margin-top: 0;'>üö´ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h3>
                <p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> {$message}</p>
                <p><strong>–í—Ä–µ–º—è:</strong> " . date('Y-m-d H:i:s') . "</p>
                <p><strong>–§–∞–π–ª:</strong> " . __FILE__ . "</p>
            </div>";
            die($error_html);
        } else {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            $this->log("DATABASE ERROR: " . $message, 'ERROR');
            die("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private function log($message, $level = 'INFO') {
        $timestamp = date('Y-m-d H:i:s');
        $log_entry = "[{$timestamp}] {$level}: {$message}\n";
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª (—Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
        $log_file = __DIR__ . '/logs/database.log';
        if (!is_dir(dirname($log_file))) {
            mkdir(dirname($log_file), 0755, true);
        }
        
        file_put_contents($log_file, $log_entry, FILE_APPEND | LOCK_EX);
    }

    private function isDevelopment() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        return $_SERVER['SERVER_NAME'] == 'localhost' || 
               $_SERVER['SERVER_NAME'] == '127.0.0.1' ||
               strpos($_SERVER['SERVER_NAME'], '.local') !== false;
    }

    public function __destruct() {
        if ($this->conn) {
            $this->conn->close();
            $this->log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ");
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try {
    $db = Database::getInstance();
    $conn = $db->getConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
    $check_tables = $conn->query("SHOW TABLES LIKE 'categories'");
    if ($check_tables->num_rows == 0) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        $db->log("–í–Ω–∏–º–∞–Ω–∏–µ: —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", 'WARNING');
    }
    
} catch (Exception $e) {
    die("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
function db_query($sql, $params = []) {
    global $db;
    return $db->query($sql, $params);
}

?>